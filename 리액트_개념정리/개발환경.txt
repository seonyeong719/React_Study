1. node.js
    - 브라우저 밖에서 자바크립트를 실행 시켜주는 자바스크립트의 실행 환경이다. 
        node 가 탄생한 이후 부턴 브라우저에서 js 로 웹개발을 하는것 뿐만 아니라,
        컴퓨터에서 스크립트를 작성하거나 서버를 만들때도 자바스크립트를 사용할 수 있게 되었다.

        -> Server-side rendering 뿐만 아니라 다양한 command line tools 를 사용할 수도 있으며,
            우리만의 스크립트를 작성해서 컴퓨터에서 실행이 가능하다. 
            심지어 백엔드까지 자바스크립트로 만들수 있다!!!!!

    * npm
        - node를 설치하면 자동으로 npm 이 설치가 되는데, npm은 = package manager 이다!!!!!!
        - 프로젝트를 만들때 우리의 코드 뿐만 아니라 외부의 라이브러리를 가져오는데, 
          그 라이브러리를 쉽게 설치하고 버전을 관리 할 수 있게 해주는것이 = npm 이다. 

        => npm 을 사용하면 package.json 이라는 파일을 프로젝트 루트에 만들게 되는데, 
            package.json 안에는 프로젝트 이름, 버전, 프로젝트에서 사용하는 모든 외부 라이브러리의 dependency를 명시하며,
            버전을 관리할 수있다. 

    >>>  만약 이 라이브러리들을 개별적으로 실행하고 싶다면???? => 이럴때 사용하는것이 ~~ npx 이다!!!


    * npx
        - 패키지들을 개별적으로 실행할 수 있게 도와주는 툴이다.
        
        ! 사용법
            => npx some=package(실행하고자 하는 라이브러리 이름) 작성


    * yarn
        - npm 을 대체해서 사용할 수 있는 package manager 이다.  (npm 과 호환이 되지만 둘중 하나로 선택해 일관성있게 사용하길 권장!)
        - npm 에서 부족한 부분을 보완하기 위해 살짝 수정되어 만들어 졌다. 
         
          !? npm 은 사용하는 외부 라이브러리가 많으면 많을수록 속도가 현저히 떨어진다. 
          => 이유는 필요한 라이브러리를 하나하나 순차적으로 실행하고 설치하기 때문인데, 

          ** yarn 은 필요한 라이브러리를 병렬적으로 동시에 설치하고 실행하기 떄문에 
          npm 보다 상대적으로 빠르고 보안적으로도  yarn 이 더 뛰어나다.


=============> npm 또한 지속적으로 개선이 되는중이다.


2. Create React App
    - SPA 를 사용하기 위해 많은 개발자들이 사용하는 모든 툴들을 간편하게 모아 놓은 것.

     *** 리액트 개발을 할 때 수동적으로 리액트를 설치를 할 수 있으나, 리액트만 설치해서는 안된다.
         바벨, 웹팩, 배포할때 필요한 tool 등등 설치할 것들이 많은데, 일일이 하나씩 설치하면 시간이 오래걸림.

         => 개발자들이 사용하는 툴들과 그것을 설정하는 기본인 세팅들을 한번에 할수있는것이 Create React App 이다.

    @@ 설치하는 방법 @@
    - npx create-react-app test1(원하는 프로젝트 이름)

    




