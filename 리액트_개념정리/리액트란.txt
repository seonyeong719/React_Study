1. 리액트란?
- react 는 UI(User Interfaces) 를 만들기 위한 자바스크립트의 라이브러리이다.
    (UI를 만들어 나간다 = Components들을 만들어 나간다~ 라고 생각하면 된다.)
- 웹 뿐만 아니라 모바일 앱을 손쉽게 만들수 있다.


    * SPA (Single Page Application) 
        - 하나의 애플리케이션 내에서 컴포넌트를 보여줬다가 숨겼다가 하는 동작. 
          즉, 페이지 내에서 자유자재로 네비게이션을 할 수 있는 것.

    * CSR (Client Side Rendering)
        - 우리가 작성한 코드 js뿐만 아니라 react 라이브러리를 함께 다 다운 받은 다음에 사용자 화면에 UI가 표기 되기 때문에,
          Client 측에서 랜더링이 이루어 진다. 



2. 컴포넌트 (Components)
** 응집도가 높은 UI 블럭. 다른 컴포넌트들과 연결되어있지 않으며, 독립적이다. => 즉 최고의 응집도를 유지하고 있는 빌딩. 
- Components의 집합체가 = 리액트 이다. 
- 재사용 가능한 것들을 나누어 놓은것이 컴포넌트.

    * 좋은 컴포넌트란? 
    - 다른 컴포넌트들이랑 연결되어있지 않고, 독립적이며, 재사용성이 높아야 한다.


    2-2. 컴포넌트를 나누는 기준?
        * 재사용성 - 말그대로 재사용성이 있는 부분을 생각해서 컴포넌트화를 해주어야 함. 

        * 단일책임 - 한 페이지 안에 재사용성이 낮을지라도 한 컴포넌트 안에서 너무 많은 UI를 가지고 있거나,
                   많은 로직과 다양한 일들을 하게 된다면 => 이것들을 조금 더 작은 단위로 나눠서 사용 가능.
                  (= 비록 재사용을 하지 않더라도, 컴포넌트를 작은 단위로!!! 각자의 컴포넌트가 하나의 책임을 가질수 있도록 분리시켜주는 것!)



3. 함수형 컴포넌트
    
    - 함수형 컴포넌트가 나오기 전 Class형 컴포넌트를 사용했는데, 
      클래스 컴포넌트의 단점들 때문에 함수형 컴포넌트로 넘어왔다.
    
    ** Class 컴포넌트 단점? 
    - this 바인딩 이슈 때문
    - 로직들을 재사용 하기 어려움.

=> 함수형 컴포넌트는 재사용이 용이하고, JSX 를 리턴하는것만 잘 만들어 두면 컴포넌트를 손쉽게 만들 수 있다.
   또한, 리액트 Hooks를 이용하여 로직들을 재사용할 수 있게 되었다. 



4. 리액트 훅(Hook)함수란? 

- 훅은 리액트에 관련된 state와 lifeCycle(재사용 가능한 로직들) 을 갈고리(hook) 처럼 연결 할 수 있는 함수이다. 
    => 재사용 가능한 로직들은 use~ 로 시작한다. 

**** Hooks(함수들)은~
        !!!!값의 재사용이 아닌 로직의 재사용을 위한 것이다!!!!
