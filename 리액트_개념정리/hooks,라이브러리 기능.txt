- useState
    * 장점 => 

    * 단점 => 

- useEffect
    * 장점 =>

    * 단점 => 

- useReducer
    * 장점 => 비즈니스 로직이 분리가 되어있어서 재사용이 용이하다. (즉, 전역상태관리에 좋다.)
		    state 변경로직을 반복적으로 사용해야할때 사용 용이. (flux패턴 기반.)
		    복잡한 state의 변경 로직 ( 함수 )를 바깥으로 빼내어 dispatch를 통해 
            해당 로직은 어디에서나 재사용할 수 있도록 하기 위해 사용한다.

    * 단점 => 반복되지도 않는 로직을 빼서 사용하면 코드가 길어지고, 개발자에게 어떤 타입을 보내야하는지 혼동을준다는 단점이 있다. 


- useContext
    * 장점 => 전역상태관리에 용이. 프롭스 드릴링(props drilling) 없이 바로 전역으로 관리할 수 있는점이 장점.   

    * 단점 => context 로 묶여진? 사용되는 state들을 다 재랜더링 시켜서 context는 남발 하면 안된다.


- useMemo
    * 장점 =>

    * 단점 => 


- useCallback
    * 장점 =>

    * 단점 => 


- Immer (이머)

    중첩된 객체가 많아지고 스프레드 연산자를 계속 해서 반복적으로 사용하는것이 복잡하여
    좀 더 직관적으로 사용하고 싶다고 생각한 사람들이 만든게 이머(immer)라이브러리 이다. 

    * 동작 원리?
        일반 object를 만들어 주는 것 처럼 사용을 하지만, immer 내부적으로 별도의 객체를 만들어서
        우리가 원하는것을 수정 하면? =>  immer에서 내부적으로 새로운 객체를 만들어서 필요한것만 업데이트 해서 새로운 객체를 만들어 준다. 


